buildscript {
	repositories {
		jcenter()
		maven {
			url = 'http://files.minecraftforge.net/maven'
		}
		maven {
			name = 'gradle'
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

plugins {
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.71.4"
	id 'org.ajoberstar.grgit' version '3.1.1'
	id 'maven-publish'
	id 'eclipse'
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = "${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

repositories {
	mavenLocal()
	maven {
		name 'prog'
		url 'https://dvs1.progwml6.com/files/maven'
	}
	mavenCentral()
}

minecraft {
	version = "${minecraft_version}-${forge_version}"
	mappings = "${mappings_version}"
	useDepAts = true
	runDir = 'run'
	replace '@VERSION@', version
	replace '@FINGERPRINT@', project.findProperty('signSHA1')
	replaceIn "ExoInfo.java"
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version
	
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}
	
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}

	rename '(.+_at.cfg)', 'META-INF/$1'
}

dependencies {
	
	compileOnly "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
	runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"

	compileOnly "org.projectlombok:lombok:${lombok_version}"
	annotationProcessor "org.projectlombok:lombok:${lombok_version}"
	
	testCompileOnly "org.projectlombok:lombok:${lombok_version}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"

	compileOnly "com.readonlydev:Interstellar:1.12.2-0.1.0-build13:dev"
}

apply from: 'https://raw.githubusercontent.com/ReadOnlyDevelopment/gradle/galacticraft/dev-latest.gradle'

def setMainManifestProps = { Manifest manifest->
		manifest.attributes (
			'FMLAT': 'interstellar_at.cfg',
		)
		manifest.mainAttributes (
			'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
			'Timestamp': System.currentTimeMillis(),
			'Specification-Title': 'Interstellar: Exoplanets',
			'Specification-Vendor': 'ReadOnly Development',
			'Specification-Version': '1',
			'Implementation-Title': 'Interstellar: Exoplanets',
			'Implementation-Version': project.version,
			'Implementation-Vendor' :'ReadOnly Development',
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
			'Built-On': "${project.minecraft_version}-${project.forge_version}"
		)	
}

jar {
	manifest(setMainManifestProps)
}

task apiJar(type: Jar) {
	baseName "Interstellar-Exoplanets"
	dependsOn "sourceMainJava"
	include 'net/interstellar/api/**'
	from sourceSets.main.java.srcDirs
	from sourceSets.main.output
	classifier "api"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	description = 'Creates a JAR containing the source code.'
	from sourceSets.main.allSource
	classifier = 'sources'
}
	
task javadocJar(type: Jar, dependsOn: javadoc) {
	description = 'Creates a JAR containing the JavaDocs.'
	from javadoc.destinationDir
	classifier = 'javadoc'
}
	
task deobfJar(type: Jar) {
	description = 'Creates a JAR containing the non-obfuscated compiled code.'
	from sourceSets.main.output
	classifier = "deobf"
}

artifacts {
	archives apiJar
	archives sourcesJar
	archives javadocJar
	archives deobfJar
}

//Shuts up javadoc failures
if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	keyStore = project.findProperty('keyStore')
	alias = project.findProperty('keyStoreAlias')
	storePass = project.findProperty('keyStorePass')
	keyPass = project.findProperty('keyStoreKeyPass')
	inputFile = jar.archivePath
	outputFile = jar.archivePath
}

build.dependsOn signJar
publish.dependsOn build